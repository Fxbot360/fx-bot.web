{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nexport var initialState = {\n  isSticky: false,\n  isSidebarSticky: true\n};\nexport function reducer(state, _ref) {\n  var type = _ref.type;\n  switch (type) {\n    case 'SET_STICKY':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isSticky: true\n      });\n    case 'REMOVE_STICKY':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isSticky: false\n      });\n    case 'SET_SIDEBAR_STICKY':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isSidebarSticky: true\n      });\n    case 'REMOVE_SIDEBAR_STICKY':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isSidebarSticky: false\n      });\n    default:\n      {\n        throw new Error(\"Unsupported action type: \".concat(type));\n      }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}