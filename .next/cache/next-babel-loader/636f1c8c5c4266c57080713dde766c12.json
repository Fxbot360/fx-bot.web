{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.hasBasePath = hasBasePath;\nexports.addBasePath = addBasePath;\nexports.delBasePath = delBasePath;\nexports.isLocalURL = isLocalURL;\nexports.resolveHref = resolveHref;\nexports.markLoadingError = markLoadingError;\nexports.default = void 0;\nvar _normalizeTrailingSlash = require(\"../../../client/normalize-trailing-slash\");\nvar _denormalizePagePath = require(\"../../server/denormalize-page-path\");\nvar _mitt = _interopRequireDefault(require(\"../mitt\"));\nvar _utils = require(\"../utils\");\nvar _isDynamic = require(\"./utils/is-dynamic\");\nvar _parseRelativeUrl = require(\"./utils/parse-relative-url\");\nvar _querystring = require(\"./utils/querystring\");\nvar _resolveRewrites = _interopRequireDefault(require(\"./utils/resolve-rewrites\"));\nvar _routeMatcher = require(\"./utils/route-matcher\");\nvar _routeRegex = require(\"./utils/route-regex\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} /* global __NEXT_DATA__ */ // tslint:disable:no-console\nconst basePath = process.env.__NEXT_ROUTER_BASEPATH || '';\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true\n  });\n}\nfunction hasBasePath(path) {\n  return path === basePath || path.startsWith(basePath + '/');\n}\nfunction addBasePath(path) {\n  // we only add the basepath on relative urls\n  return basePath && path.startsWith('/') ? path === '/' ? (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(basePath) : basePath + path : path;\n}\nfunction delBasePath(path) {\n  return path.slice(basePath.length) || '/';\n} /**\n  * Detects whether a given url is routable by the Next.js router (browser only).\n  */\nfunction isLocalURL(url) {\n  if (url.startsWith('/')) return true;\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = (0, _utils.getLocationOrigin)();\n    const resolved = new URL(url, locationOrigin);\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);\n  } catch (_) {\n    return false;\n  }\n} /**\n  * Resolves a given hyperlink with a certain router state (basePath not included).\n  * Preserves absolute urls.\n  */\nfunction resolveHref(currentPath, href) {\n  // we use a dummy base url for relative urls\n  const base = new URL(currentPath, 'http://n');\n  const urlAsString = typeof href === 'string' ? href : (0, _utils.formatWithValidation)(href);\n  try {\n    const finalUrl = new URL(urlAsString, base);\n    finalUrl.pathname = (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(finalUrl.pathname); // if the origin didn't change, it means we received a relative href\n    return finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;\n  } catch (_) {\n    return urlAsString;\n  }\n}\nconst PAGE_LOAD_ERROR = Symbol('PAGE_LOAD_ERROR');\nfunction markLoadingError(err) {\n  return Object.defineProperty(err, PAGE_LOAD_ERROR, {});\n}\nfunction prepareUrlAs(router, url, as) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  return {\n    url: addBasePath(resolveHref(router.pathname, url)),\n    as: as ? addBasePath(resolveHref(router.pathname, as)) : as\n  };\n}\nconst manualScrollRestoration = process.env.__NEXT_SCROLL_RESTORATION && false && 'scrollRestoration' in window.history;\nfunction fetchRetry(url, attempts) {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` wonâ€™t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin'\n  }).then(res => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1);\n      }\n      throw new Error(`Failed to load static props`);\n    }\n    return res.json();\n  });\n}\nfunction fetchNextData(dataHref, isServerRender) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch(err => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      markLoadingError(err);\n    }\n    throw err;\n  });\n}\nclass Router {\n  /**\n  * Map of all components loaded in `Router`\n  */ // Static Data Cache\n  constructor(_pathname, _query, _as, {\n    initialProps,\n    pageLoader,\n    App,\n    wrapApp,\n    Component,\n    initialStyleSheets,\n    err,\n    subscription,\n    isFallback\n  }) {\n    this.route = void 0;\n    this.pathname = void 0;\n    this.query = void 0;\n    this.asPath = void 0;\n    this.basePath = void 0;\n    this.components = void 0;\n    this.sdc = {};\n    this.sub = void 0;\n    this.clc = void 0;\n    this.pageLoader = void 0;\n    this._bps = void 0;\n    this.events = void 0;\n    this._wrapApp = void 0;\n    this.isSsr = void 0;\n    this.isFallback = void 0;\n    this._inFlightRoute = void 0;\n    this._shallow = void 0;\n    this.onPopState = e => {\n      const state = e.state;\n      if (!state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState('replaceState', (0, _utils.formatWithValidation)({\n          pathname: addBasePath(pathname),\n          query\n        }), (0, _utils.getURL)());\n        return;\n      }\n      if (!state.__N) {\n        return;\n      }\n      const {\n        url,\n        as,\n        options\n      } = state;\n      const {\n        pathname\n      } = (0, _parseRelativeUrl.parseRelativeUrl)(url); // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n      if (this.isSsr && as === this.asPath && pathname === this.pathname) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n      if (this._bps && !this._bps(state)) {\n        return;\n      }\n      this.change('replaceState', url, as, Object.assign({}, options, {\n        shallow: options.shallow && this._shallow\n      }));\n    }; // represents the current component key\n    this.route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(_pathname); // set up the component cache (by route keys)\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (_pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        styleSheets: initialStyleSheets,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP\n      };\n    }\n    this.components['/_app'] = {\n      Component: App,\n      styleSheets: [/* /_app does not need its stylesheets managed */]\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = _pathname;\n    this.query = _query; // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    this.asPath =\n    // @ts-ignore this is temporarily global (attached to window)\n    (0, _isDynamic.isDynamicRoute)(_pathname) && __NEXT_DATA__.autoExport ? _pathname : _as;\n    this.basePath = basePath;\n    this.sub = subscription;\n    this.clc = null;\n    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating\n    // back from external site\n    this.isSsr = true;\n    this.isFallback = isFallback;\n    if (false) {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (_as.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        this.changeState('replaceState', (0, _utils.formatWithValidation)({\n          pathname: addBasePath(_pathname),\n          query: _query\n        }), (0, _utils.getURL)());\n      }\n      window.addEventListener('popstate', this.onPopState); // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = 'manual';\n          let scrollDebounceTimeout;\n          const debouncedScrollSave = () => {\n            if (scrollDebounceTimeout) clearTimeout(scrollDebounceTimeout);\n            scrollDebounceTimeout = setTimeout(() => {\n              const {\n                url,\n                as: curAs,\n                options\n              } = history.state;\n              this.changeState('replaceState', url, curAs, Object.assign({}, options, {\n                _N_X: window.scrollX,\n                _N_Y: window.scrollY\n              }));\n            }, 10);\n          };\n          window.addEventListener('scroll', debouncedScrollSave);\n        }\n      }\n    }\n  }\n  reload() {\n    window.location.reload();\n  } /**\n    * Go back in history\n    */\n  back() {\n    window.history.back();\n  } /**\n    * Performs a `pushState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n  push(url, as = url, options = {}) {\n    ;\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('pushState', url, as, options);\n  } /**\n    * Performs a `replaceState` with arguments\n    * @param url of the route\n    * @param as masks `url` for the browser\n    * @param options object you can define `shallow` and other options\n    */\n  replace(url, as = url, options = {}) {\n    ;\n    ({\n      url,\n      as\n    } = prepareUrlAs(this, url, as));\n    return this.change('replaceState', url, as, options);\n  }\n  async change(method, url, as, options) {\n    if (!isLocalURL(url)) {\n      window.location.href = url;\n      return false;\n    }\n    if (!options._h) {\n      this.isSsr = false;\n    } // marking route changes as a navigation start entry\n    if (_utils.ST) {\n      performance.mark('routeChange');\n    }\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute);\n    }\n    const cleanedAs = hasBasePath(as) ? delBasePath(as) : as;\n    this._inFlightRoute = as; // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n    if (!options._h && this.onlyAHashChange(cleanedAs)) {\n      this.asPath = cleanedAs;\n      Router.events.emit('hashChangeStart', as); // TODO: do we need the resolved href when only a hash change?\n      this.changeState(method, url, as, options);\n      this.scrollToHash(cleanedAs);\n      this.notify(this.components[this.route]);\n      Router.events.emit('hashChangeComplete', as);\n      return true;\n    } // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n    const pages = await this.pageLoader.getPageList();\n    const {\n      __rewrites: rewrites\n    } = await this.pageLoader.promisedBuildManifest;\n    let parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);\n    let {\n      pathname,\n      searchParams\n    } = parsed;\n    parsed = this._resolveHref(parsed, pages);\n    if (parsed.pathname !== pathname) {\n      pathname = parsed.pathname;\n      url = (0, _utils.formatWithValidation)(parsed);\n    }\n    const query = (0, _querystring.searchParamsToUrlQuery)(searchParams); // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n    pathname = pathname ? (0, _normalizeTrailingSlash.removePathTrailingSlash)(delBasePath(pathname)) : pathname; // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n    if (!this.urlIsNew(cleanedAs)) {\n      method = 'replaceState';\n    }\n    const route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);\n    const {\n      shallow = false\n    } = options; // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n    let resolvedAs = as;\n    if (process.env.__NEXT_HAS_REWRITES) {\n      resolvedAs = (0, _resolveRewrites.default)(as, pages, basePath, rewrites, query, p => this._resolveHref({\n        pathname: p\n      }, pages).pathname);\n    }\n    resolvedAs = delBasePath(resolvedAs);\n    if ((0, _isDynamic.isDynamicRoute)(route)) {\n      const {\n        pathname: asPathname\n      } = (0, _parseRelativeUrl.parseRelativeUrl)(resolvedAs);\n      const routeRegex = (0, _routeRegex.getRouteRegex)(route);\n      const routeMatch = (0, _routeMatcher.getRouteMatcher)(routeRegex)(asPathname);\n      if (!routeMatch) {\n        const missingParams = Object.keys(routeRegex.groups).filter(param => !query[param]);\n        if (missingParams.length > 0) {\n          if (true) {\n            console.warn(`Mismatching \\`as\\` and \\`href\\` failed to manually provide ` + `the params: ${missingParams.join(', ')} in the \\`href\\`'s \\`query\\``);\n          }\n          throw new Error(`The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). ` + `Read more: https://err.sh/vercel/next.js/incompatible-href-as`);\n        }\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch);\n      }\n    }\n    Router.events.emit('routeChangeStart', as);\n    try {\n      const routeInfo = await this.getRouteInfo(route, pathname, query, as, shallow);\n      let {\n        error\n      } = routeInfo;\n      Router.events.emit('beforeHistoryChange', as);\n      this.changeState(method, url, as, options);\n      if (true) {\n        const appComp = this.components['/_app'].Component;\n        window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;\n      }\n      await this.set(route, pathname, query, cleanedAs, routeInfo).catch(e => {\n        if (e.cancelled) error = error || e;else throw e;\n      });\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs);\n        throw error;\n      }\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration && '_N_X' in options) {\n          window.scrollTo(options._N_X, options._N_Y);\n        }\n      }\n      Router.events.emit('routeChangeComplete', as);\n      return true;\n    } catch (err) {\n      if (err.cancelled) {\n        return false;\n      }\n      throw err;\n    }\n  }\n  changeState(method, url, as, options = {}) {\n    if (true) {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      }\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n    if (method !== 'pushState' || (0, _utils.getURL)() !== as) {\n      this._shallow = options.shallow;\n      window.history[method]({\n        url,\n        as,\n        options,\n        __N: true\n      },\n      // Most browsers currently ignores this parameter, although they may use it in the future.\n      // Passing the empty string here should be safe against future changes to the method.\n      // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n      '', as);\n    }\n  }\n  async handleRouteInfoError(err, pathname, query, as, loadErrorFail) {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err;\n    }\n    if (PAGE_LOAD_ERROR in err || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as); // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n      // So, doing a hard reload is the proper way to deal with this.\n      window.location.href = as; // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n      throw buildCancellationError();\n    }\n    try {\n      const {\n        page: Component,\n        styleSheets\n      } = await this.fetchComponent('/_error');\n      const routeInfo = {\n        Component,\n        styleSheets,\n        err,\n        error: err\n      };\n      try {\n        routeInfo.props = await this.getInitialProps(Component, {\n          err,\n          pathname,\n          query\n        });\n      } catch (gipErr) {\n        console.error('Error in error page `getInitialProps`: ', gipErr);\n        routeInfo.props = {};\n      }\n      return routeInfo;\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError(routeInfoErr, pathname, query, as, true);\n    }\n  }\n  async getRouteInfo(route, pathname, query, as, shallow = false) {\n    try {\n      const cachedRouteInfo = this.components[route];\n      if (shallow && cachedRouteInfo && this.route === route) {\n        return cachedRouteInfo;\n      }\n      const routeInfo = cachedRouteInfo ? cachedRouteInfo : await this.fetchComponent(route).then(res => ({\n        Component: res.page,\n        styleSheets: res.styleSheets,\n        __N_SSG: res.mod.__N_SSG,\n        __N_SSP: res.mod.__N_SSP\n      }));\n      const {\n        Component,\n        __N_SSG,\n        __N_SSP\n      } = routeInfo;\n      if (true) {\n        const {\n          isValidElementType\n        } = require('react-is');\n        if (!isValidElementType(Component)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n      let dataHref;\n      if (__N_SSG || __N_SSP) {\n        dataHref = this.pageLoader.getDataHref((0, _utils.formatWithValidation)({\n          pathname,\n          query\n        }), delBasePath(as), __N_SSG);\n      }\n      const props = await this._getData(() => __N_SSG ? this._getStaticData(dataHref) : __N_SSP ? this._getServerData(dataHref) : this.getInitialProps(Component,\n      // we provide AppTree later so this needs to be `any`\n      {\n        pathname,\n        query,\n        asPath: as\n      }));\n      routeInfo.props = props;\n      this.components[route] = routeInfo;\n      return routeInfo;\n    } catch (err) {\n      return this.handleRouteInfoError(err, pathname, query, as);\n    }\n  }\n  set(route, pathname, query, as, data) {\n    this.isFallback = false;\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    return this.notify(data);\n  } /**\n    * Callback to execute before replacing router state\n    * @param cb callback to be executed\n    */\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n    return oldHash !== newHash;\n  }\n  scrollToHash(as) {\n    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value\n    if (hash === '') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n    const idEl = document.getElementById(hash);\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n    const nameEl = document.getElementsByName(hash)[0];\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n  _resolveHref(parsedHref, pages) {\n    const {\n      pathname\n    } = parsedHref;\n    const cleanPathname = (0, _denormalizePagePath.denormalizePagePath)(delBasePath(pathname));\n    if (cleanPathname === '/404' || cleanPathname === '/_error') {\n      return parsedHref;\n    } // handle resolving href for dynamic routes\n    if (!pages.includes(cleanPathname)) {\n      // eslint-disable-next-line array-callback-return\n      pages.some(page => {\n        if ((0, _isDynamic.isDynamicRoute)(page) && (0, _routeRegex.getRouteRegex)(page).re.test(cleanPathname)) {\n          parsedHref.pathname = addBasePath(page);\n          return true;\n        }\n      });\n    }\n    return parsedHref;\n  } /**\n    * Prefetch page code, you may wait for the data during page rendering.\n    * This feature only works in production!\n    * @param url the href of prefetched page\n    * @param asPath the as path of the prefetched page\n    */\n  async prefetch(url, asPath = url, options = {}) {\n    let parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);\n    let {\n      pathname\n    } = parsed;\n    const pages = await this.pageLoader.getPageList();\n    parsed = this._resolveHref(parsed, pages);\n    if (parsed.pathname !== pathname) {\n      pathname = parsed.pathname;\n      url = (0, _utils.formatWithValidation)(parsed);\n    } // Prefetch is not supported in development mode because it would trigger on-demand-entries\n    if (true) {\n      return;\n    }\n    const route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);\n    await Promise.all([this.pageLoader.prefetchData(url, asPath), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);\n  }\n  async fetchComponent(route) {\n    let cancelled = false;\n    const cancel = this.clc = () => {\n      cancelled = true;\n    };\n    const componentResult = await this.pageLoader.loadPage(route);\n    if (cancelled) {\n      const error = new Error(`Abort fetching component for route: \"${route}\"`);\n      error.cancelled = true;\n      throw error;\n    }\n    if (cancel === this.clc) {\n      this.clc = null;\n    }\n    return componentResult;\n  }\n  _getData(fn) {\n    let cancelled = false;\n    const cancel = () => {\n      cancelled = true;\n    };\n    this.clc = cancel;\n    return fn().then(data => {\n      if (cancel === this.clc) {\n        this.clc = null;\n      }\n      if (cancelled) {\n        const err = new Error('Loading initial props cancelled');\n        err.cancelled = true;\n        throw err;\n      }\n      return data;\n    });\n  }\n  _getStaticData(dataHref) {\n    const {\n      href: cacheKey\n    } = new URL(dataHref, window.location.href);\n    if (false && this.sdc[cacheKey]) {\n      return Promise.resolve(this.sdc[cacheKey]);\n    }\n    return fetchNextData(dataHref, this.isSsr).then(data => {\n      this.sdc[cacheKey] = data;\n      return data;\n    });\n  }\n  _getServerData(dataHref) {\n    return fetchNextData(dataHref, this.isSsr);\n  }\n  getInitialProps(Component, ctx) {\n    const {\n      Component: App\n    } = this.components['/_app'];\n    const AppTree = this._wrapApp(App);\n    ctx.AppTree = AppTree;\n    return (0, _utils.loadGetInitialProps)(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx\n    });\n  }\n  abortComponentLoad(as) {\n    if (this.clc) {\n      Router.events.emit('routeChangeError', buildCancellationError(), as);\n      this.clc();\n      this.clc = null;\n    }\n  }\n  notify(data) {\n    return this.sub(data, this.components['/_app'].Component);\n  }\n}\nexports.default = Router;\nRouter.events = (0, _mitt.default)();","map":{"version":3,"sources":["../../../../next-server/lib/router/router.ts"],"names":["basePath","process","env","__NEXT_ROUTER_BASEPATH","buildCancellationError","Object","assign","Error","cancelled","hasBasePath","path","startsWith","addBasePath","delBasePath","slice","length","isLocalURL","url","locationOrigin","resolved","URL","origin","pathname","_","resolveHref","currentPath","href","base","urlAsString","finalUrl","PAGE_LOAD_ERROR","Symbol","markLoadingError","err","defineProperty","prepareUrlAs","router","as","manualScrollRestoration","__NEXT_SCROLL_RESTORATION","window","history","fetchRetry","attempts","credentials","then","res","ok","status","json","fetchNextData","dataHref","isServerRender","catch","Router","route","query","asPath","components","sdc","sub","clc","pageLoader","_bps","events","_wrapApp","isSsr","isFallback","_inFlightRoute","_shallow","constructor","initialProps","App","wrapApp","Component","initialStyleSheets","subscription","styleSheets","props","__N_SSG","__N_SSP","__NEXT_DATA__","autoExport","substr","changeState","addEventListener","onPopState","scrollRestoration","scrollDebounceTimeout","debouncedScrollSave","clearTimeout","setTimeout","curAs","options","state","_N_X","scrollX","_N_Y","scrollY","e","__N","change","shallow","reload","location","back","push","replace","method","_h","ST","performance","mark","abortComponentLoad","cleanedAs","onlyAHashChange","emit","scrollToHash","notify","pages","getPageList","__rewrites","rewrites","promisedBuildManifest","parsed","searchParams","_resolveHref","urlIsNew","resolvedAs","__NEXT_HAS_REWRITES","p","asPathname","routeRegex","routeMatch","missingParams","keys","groups","filter","param","console","warn","join","routeInfo","getRouteInfo","error","appComp","next","isPrerendered","getInitialProps","origGetInitialProps","set","scrollTo","handleRouteInfoError","loadErrorFail","page","fetchComponent","gipErr","routeInfoErr","cachedRouteInfo","mod","isValidElementType","require","getDataHref","_getData","_getStaticData","_getServerData","data","beforePopState","cb","oldUrlNoHash","oldHash","split","newUrlNoHash","newHash","hash","idEl","document","getElementById","scrollIntoView","nameEl","getElementsByName","parsedHref","cleanPathname","includes","some","re","test","prefetch","Promise","all","prefetchData","priority","cancel","componentResult","loadPage","fn","cacheKey","resolve","ctx","AppTree"],"mappings":"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","sourcesContent":["/* global __NEXT_DATA__ */\n// tslint:disable:no-console\nimport { ParsedUrlQuery } from 'querystring'\nimport { ComponentType } from 'react'\nimport { UrlObject } from 'url'\nimport {\n  normalizePathTrailingSlash,\n  removePathTrailingSlash,\n} from '../../../client/normalize-trailing-slash'\nimport { GoodPageCache, StyleSheetTuple } from '../../../client/page-loader'\nimport { denormalizePagePath } from '../../server/denormalize-page-path'\nimport mitt, { MittEmitter } from '../mitt'\nimport {\n  AppContextType,\n  formatWithValidation,\n  getLocationOrigin,\n  getURL,\n  loadGetInitialProps,\n  NextPageContext,\n  ST,\n} from '../utils'\nimport { isDynamicRoute } from './utils/is-dynamic'\nimport { parseRelativeUrl } from './utils/parse-relative-url'\nimport { searchParamsToUrlQuery } from './utils/querystring'\nimport resolveRewrites from './utils/resolve-rewrites'\nimport { getRouteMatcher } from './utils/route-matcher'\nimport { getRouteRegex } from './utils/route-regex'\n\ninterface TransitionOptions {\n  shallow?: boolean\n}\n\ninterface NextHistoryState {\n  url: string\n  as: string\n  options: TransitionOptions\n}\n\ntype HistoryState = null | { __N: false } | ({ __N: true } & NextHistoryState)\n\nconst basePath = (process.env.__NEXT_ROUTER_BASEPATH as string) || ''\n\nfunction buildCancellationError() {\n  return Object.assign(new Error('Route Cancelled'), {\n    cancelled: true,\n  })\n}\n\nexport function hasBasePath(path: string): boolean {\n  return path === basePath || path.startsWith(basePath + '/')\n}\n\nexport function addBasePath(path: string): string {\n  // we only add the basepath on relative urls\n  return basePath && path.startsWith('/')\n    ? path === '/'\n      ? normalizePathTrailingSlash(basePath)\n      : basePath + path\n    : path\n}\n\nexport function delBasePath(path: string): string {\n  return path.slice(basePath.length) || '/'\n}\n\n/**\n * Detects whether a given url is routable by the Next.js router (browser only).\n */\nexport function isLocalURL(url: string): boolean {\n  if (url.startsWith('/')) return true\n  try {\n    // absolute urls can be local if they are on the same origin\n    const locationOrigin = getLocationOrigin()\n    const resolved = new URL(url, locationOrigin)\n    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname)\n  } catch (_) {\n    return false\n  }\n}\n\ntype Url = UrlObject | string\n\n/**\n * Resolves a given hyperlink with a certain router state (basePath not included).\n * Preserves absolute urls.\n */\nexport function resolveHref(currentPath: string, href: Url): string {\n  // we use a dummy base url for relative urls\n  const base = new URL(currentPath, 'http://n')\n  const urlAsString =\n    typeof href === 'string' ? href : formatWithValidation(href)\n  try {\n    const finalUrl = new URL(urlAsString, base)\n    finalUrl.pathname = normalizePathTrailingSlash(finalUrl.pathname)\n    // if the origin didn't change, it means we received a relative href\n    return finalUrl.origin === base.origin\n      ? finalUrl.href.slice(finalUrl.origin.length)\n      : finalUrl.href\n  } catch (_) {\n    return urlAsString\n  }\n}\n\nconst PAGE_LOAD_ERROR = Symbol('PAGE_LOAD_ERROR')\nexport function markLoadingError(err: Error): Error {\n  return Object.defineProperty(err, PAGE_LOAD_ERROR, {})\n}\n\nfunction prepareUrlAs(router: NextRouter, url: Url, as: Url) {\n  // If url and as provided as an object representation,\n  // we'll format them into the string version here.\n  return {\n    url: addBasePath(resolveHref(router.pathname, url)),\n    as: as ? addBasePath(resolveHref(router.pathname, as)) : as,\n  }\n}\n\nexport type BaseRouter = {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n}\n\nexport type NextRouter = BaseRouter &\n  Pick<\n    Router,\n    | 'push'\n    | 'replace'\n    | 'reload'\n    | 'back'\n    | 'prefetch'\n    | 'beforePopState'\n    | 'events'\n    | 'isFallback'\n  >\n\nexport type PrefetchOptions = {\n  priority?: boolean\n}\n\nexport type PrivateRouteInfo = {\n  Component: ComponentType\n  styleSheets: StyleSheetTuple[]\n  __N_SSG?: boolean\n  __N_SSP?: boolean\n  props?: Record<string, any>\n  err?: Error\n  error?: any\n}\n\nexport type AppProps = Pick<PrivateRouteInfo, 'Component' | 'err'> & {\n  router: Router\n} & Record<string, any>\nexport type AppComponent = ComponentType<AppProps>\n\ntype Subscription = (data: PrivateRouteInfo, App: AppComponent) => Promise<void>\n\ntype BeforePopStateCallback = (state: NextHistoryState) => boolean\n\ntype ComponentLoadCancel = (() => void) | null\n\ntype HistoryMethod = 'replaceState' | 'pushState'\n\nconst manualScrollRestoration =\n  process.env.__NEXT_SCROLL_RESTORATION &&\n  typeof window !== 'undefined' &&\n  'scrollRestoration' in window.history\n\nfunction fetchRetry(url: string, attempts: number): Promise<any> {\n  return fetch(url, {\n    // Cookies are required to be present for Next.js' SSG \"Preview Mode\".\n    // Cookies may also be required for `getServerSideProps`.\n    //\n    // > `fetch` wonâ€™t send cookies, unless you set the credentials init\n    // > option.\n    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch\n    //\n    // > For maximum browser compatibility when it comes to sending &\n    // > receiving cookies, always supply the `credentials: 'same-origin'`\n    // > option instead of relying on the default.\n    // https://github.com/github/fetch#caveats\n    credentials: 'same-origin',\n  }).then((res) => {\n    if (!res.ok) {\n      if (attempts > 1 && res.status >= 500) {\n        return fetchRetry(url, attempts - 1)\n      }\n      throw new Error(`Failed to load static props`)\n    }\n\n    return res.json()\n  })\n}\n\nfunction fetchNextData(dataHref: string, isServerRender: boolean) {\n  return fetchRetry(dataHref, isServerRender ? 3 : 1).catch((err: Error) => {\n    // We should only trigger a server-side transition if this was caused\n    // on a client-side transition. Otherwise, we'd get into an infinite\n    // loop.\n    if (!isServerRender) {\n      markLoadingError(err)\n    }\n    throw err\n  })\n}\n\nexport default class Router implements BaseRouter {\n  route: string\n  pathname: string\n  query: ParsedUrlQuery\n  asPath: string\n  basePath: string\n\n  /**\n   * Map of all components loaded in `Router`\n   */\n  components: { [pathname: string]: PrivateRouteInfo }\n  // Static Data Cache\n  sdc: { [asPath: string]: object } = {}\n  sub: Subscription\n  clc: ComponentLoadCancel\n  pageLoader: any\n  _bps: BeforePopStateCallback | undefined\n  events: MittEmitter\n  _wrapApp: (App: AppComponent) => any\n  isSsr: boolean\n  isFallback: boolean\n  _inFlightRoute?: string\n  _shallow?: boolean\n\n  static events: MittEmitter = mitt()\n\n  constructor(\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    {\n      initialProps,\n      pageLoader,\n      App,\n      wrapApp,\n      Component,\n      initialStyleSheets,\n      err,\n      subscription,\n      isFallback,\n    }: {\n      subscription: Subscription\n      initialProps: any\n      pageLoader: any\n      Component: ComponentType\n      initialStyleSheets: StyleSheetTuple[]\n      App: AppComponent\n      wrapApp: (App: AppComponent) => any\n      err?: Error\n      isFallback: boolean\n    }\n  ) {\n    // represents the current component key\n    this.route = removePathTrailingSlash(pathname)\n\n    // set up the component cache (by route keys)\n    this.components = {}\n    // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        styleSheets: initialStyleSheets,\n        props: initialProps,\n        err,\n        __N_SSG: initialProps && initialProps.__N_SSG,\n        __N_SSP: initialProps && initialProps.__N_SSP,\n      }\n    }\n\n    this.components['/_app'] = {\n      Component: App as ComponentType,\n      styleSheets: [\n        /* /_app does not need its stylesheets managed */\n      ],\n    }\n\n    // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    this.events = Router.events\n\n    this.pageLoader = pageLoader\n    this.pathname = pathname\n    this.query = query\n    // if auto prerendered and dynamic route wait to update asPath\n    // until after mount to prevent hydration mismatch\n    this.asPath =\n      // @ts-ignore this is temporarily global (attached to window)\n      isDynamicRoute(pathname) && __NEXT_DATA__.autoExport ? pathname : as\n    this.basePath = basePath\n    this.sub = subscription\n    this.clc = null\n    this._wrapApp = wrapApp\n    // make sure to ignore extra popState in safari on navigating\n    // back from external site\n    this.isSsr = true\n\n    this.isFallback = isFallback\n\n    if (typeof window !== 'undefined') {\n      // make sure \"as\" doesn't start with double slashes or else it can\n      // throw an error as it's considered invalid\n      if (as.substr(0, 2) !== '//') {\n        // in order for `e.state` to work on the `onpopstate` event\n        // we have to register the initial route upon initialization\n        this.changeState(\n          'replaceState',\n          formatWithValidation({ pathname: addBasePath(pathname), query }),\n          getURL()\n        )\n      }\n\n      window.addEventListener('popstate', this.onPopState)\n\n      // enable custom scroll restoration handling when available\n      // otherwise fallback to browser's default handling\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration) {\n          window.history.scrollRestoration = 'manual'\n\n          let scrollDebounceTimeout: undefined | NodeJS.Timeout\n\n          const debouncedScrollSave = () => {\n            if (scrollDebounceTimeout) clearTimeout(scrollDebounceTimeout)\n\n            scrollDebounceTimeout = setTimeout(() => {\n              const { url, as: curAs, options } = history.state\n              this.changeState(\n                'replaceState',\n                url,\n                curAs,\n                Object.assign({}, options, {\n                  _N_X: window.scrollX,\n                  _N_Y: window.scrollY,\n                })\n              )\n            }, 10)\n          }\n\n          window.addEventListener('scroll', debouncedScrollSave)\n        }\n      }\n    }\n  }\n\n  onPopState = (e: PopStateEvent): void => {\n    const state = e.state as HistoryState\n\n    if (!state) {\n      // We get state as undefined for two reasons.\n      //  1. With older safari (< 8) and older chrome (< 34)\n      //  2. When the URL changed with #\n      //\n      // In the both cases, we don't need to proceed and change the route.\n      // (as it's already changed)\n      // But we can simply replace the state with the new changes.\n      // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n      // So, doing the following for (1) does no harm.\n      const { pathname, query } = this\n      this.changeState(\n        'replaceState',\n        formatWithValidation({ pathname: addBasePath(pathname), query }),\n        getURL()\n      )\n      return\n    }\n\n    if (!state.__N) {\n      return\n    }\n\n    const { url, as, options } = state\n\n    const { pathname } = parseRelativeUrl(url)\n\n    // Make sure we don't re-render on initial load,\n    // can be caused by navigating back from an external site\n    if (this.isSsr && as === this.asPath && pathname === this.pathname) {\n      return\n    }\n\n    // If the downstream application returns falsy, return.\n    // They will then be responsible for handling the event.\n    if (this._bps && !this._bps(state)) {\n      return\n    }\n\n    this.change(\n      'replaceState',\n      url,\n      as,\n      Object.assign({}, options, {\n        shallow: options.shallow && this._shallow,\n      })\n    )\n  }\n\n  reload(): void {\n    window.location.reload()\n  }\n\n  /**\n   * Go back in history\n   */\n  back() {\n    window.history.back()\n  }\n\n  /**\n   * Performs a `pushState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  push(url: Url, as: Url = url, options: TransitionOptions = {}) {\n    ;({ url, as } = prepareUrlAs(this, url, as))\n    return this.change('pushState', url, as, options)\n  }\n\n  /**\n   * Performs a `replaceState` with arguments\n   * @param url of the route\n   * @param as masks `url` for the browser\n   * @param options object you can define `shallow` and other options\n   */\n  replace(url: Url, as: Url = url, options: TransitionOptions = {}) {\n    ;({ url, as } = prepareUrlAs(this, url, as))\n    return this.change('replaceState', url, as, options)\n  }\n\n  async change(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options: TransitionOptions\n  ): Promise<boolean> {\n    if (!isLocalURL(url)) {\n      window.location.href = url\n      return false\n    }\n\n    if (!(options as any)._h) {\n      this.isSsr = false\n    }\n    // marking route changes as a navigation start entry\n    if (ST) {\n      performance.mark('routeChange')\n    }\n\n    if (this._inFlightRoute) {\n      this.abortComponentLoad(this._inFlightRoute)\n    }\n\n    const cleanedAs = hasBasePath(as) ? delBasePath(as) : as\n    this._inFlightRoute = as\n\n    // If the url change is only related to a hash change\n    // We should not proceed. We should only change the state.\n\n    // WARNING: `_h` is an internal option for handing Next.js client-side\n    // hydration. Your app should _never_ use this property. It may change at\n    // any time without notice.\n    if (!(options as any)._h && this.onlyAHashChange(cleanedAs)) {\n      this.asPath = cleanedAs\n      Router.events.emit('hashChangeStart', as)\n      // TODO: do we need the resolved href when only a hash change?\n      this.changeState(method, url, as, options)\n      this.scrollToHash(cleanedAs)\n      this.notify(this.components[this.route])\n      Router.events.emit('hashChangeComplete', as)\n      return true\n    }\n\n    // The build manifest needs to be loaded before auto-static dynamic pages\n    // get their query parameters to allow ensuring they can be parsed properly\n    // when rewritten to\n    const pages = await this.pageLoader.getPageList()\n    const { __rewrites: rewrites } = await this.pageLoader.promisedBuildManifest\n\n    let parsed = parseRelativeUrl(url)\n\n    let { pathname, searchParams } = parsed\n\n    parsed = this._resolveHref(parsed, pages) as typeof parsed\n\n    if (parsed.pathname !== pathname) {\n      pathname = parsed.pathname\n      url = formatWithValidation(parsed)\n    }\n\n    const query = searchParamsToUrlQuery(searchParams)\n\n    // url and as should always be prefixed with basePath by this\n    // point by either next/link or router.push/replace so strip the\n    // basePath from the pathname to match the pages dir 1-to-1\n    pathname = pathname\n      ? removePathTrailingSlash(delBasePath(pathname))\n      : pathname\n\n    // If asked to change the current URL we should reload the current page\n    // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n    // We also need to set the method = replaceState always\n    // as this should not go into the history (That's how browsers work)\n    // We should compare the new asPath to the current asPath, not the url\n    if (!this.urlIsNew(cleanedAs)) {\n      method = 'replaceState'\n    }\n\n    const route = removePathTrailingSlash(pathname)\n    const { shallow = false } = options\n\n    // we need to resolve the as value using rewrites for dynamic SSG\n    // pages to allow building the data URL correctly\n    let resolvedAs = as\n\n    if (process.env.__NEXT_HAS_REWRITES) {\n      resolvedAs = resolveRewrites(\n        as,\n        pages,\n        basePath,\n        rewrites,\n        query,\n        (p: string) => this._resolveHref({ pathname: p }, pages).pathname!\n      )\n    }\n    resolvedAs = delBasePath(resolvedAs)\n\n    if (isDynamicRoute(route)) {\n      const { pathname: asPathname } = parseRelativeUrl(resolvedAs)\n      const routeRegex = getRouteRegex(route)\n      const routeMatch = getRouteMatcher(routeRegex)(asPathname)\n      if (!routeMatch) {\n        const missingParams = Object.keys(routeRegex.groups).filter(\n          (param) => !query[param]\n        )\n\n        if (missingParams.length > 0) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `Mismatching \\`as\\` and \\`href\\` failed to manually provide ` +\n                `the params: ${missingParams.join(\n                  ', '\n                )} in the \\`href\\`'s \\`query\\``\n            )\n          }\n\n          throw new Error(\n            `The provided \\`as\\` value (${asPathname}) is incompatible with the \\`href\\` value (${route}). ` +\n              `Read more: https://err.sh/vercel/next.js/incompatible-href-as`\n          )\n        }\n      } else {\n        // Merge params into `query`, overwriting any specified in search\n        Object.assign(query, routeMatch)\n      }\n    }\n\n    Router.events.emit('routeChangeStart', as)\n\n    try {\n      const routeInfo = await this.getRouteInfo(\n        route,\n        pathname,\n        query,\n        as,\n        shallow\n      )\n      let { error } = routeInfo\n\n      Router.events.emit('beforeHistoryChange', as)\n      this.changeState(method, url, as, options)\n\n      if (process.env.NODE_ENV !== 'production') {\n        const appComp: any = this.components['/_app'].Component\n        ;(window as any).next.isPrerendered =\n          appComp.getInitialProps === appComp.origGetInitialProps &&\n          !(routeInfo.Component as any).getInitialProps\n      }\n\n      await this.set(route, pathname!, query, cleanedAs, routeInfo).catch(\n        (e) => {\n          if (e.cancelled) error = error || e\n          else throw e\n        }\n      )\n\n      if (error) {\n        Router.events.emit('routeChangeError', error, cleanedAs)\n        throw error\n      }\n\n      if (process.env.__NEXT_SCROLL_RESTORATION) {\n        if (manualScrollRestoration && '_N_X' in options) {\n          window.scrollTo((options as any)._N_X, (options as any)._N_Y)\n        }\n      }\n      Router.events.emit('routeChangeComplete', as)\n\n      return true\n    } catch (err) {\n      if (err.cancelled) {\n        return false\n      }\n      throw err\n    }\n  }\n\n  changeState(\n    method: HistoryMethod,\n    url: string,\n    as: string,\n    options: TransitionOptions = {}\n  ): void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`)\n        return\n      }\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`)\n        return\n      }\n    }\n\n    if (method !== 'pushState' || getURL() !== as) {\n      this._shallow = options.shallow\n      window.history[method](\n        {\n          url,\n          as,\n          options,\n          __N: true,\n        } as HistoryState,\n        // Most browsers currently ignores this parameter, although they may use it in the future.\n        // Passing the empty string here should be safe against future changes to the method.\n        // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\n        '',\n        as\n      )\n    }\n  }\n\n  async handleRouteInfoError(\n    err: Error & { code: any; cancelled: boolean },\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    loadErrorFail?: boolean\n  ): Promise<PrivateRouteInfo> {\n    if (err.cancelled) {\n      // bubble up cancellation errors\n      throw err\n    }\n\n    if (PAGE_LOAD_ERROR in err || loadErrorFail) {\n      Router.events.emit('routeChangeError', err, as)\n\n      // If we can't load the page it could be one of following reasons\n      //  1. Page doesn't exists\n      //  2. Page does exist in a different zone\n      //  3. Internal error while loading the page\n\n      // So, doing a hard reload is the proper way to deal with this.\n      window.location.href = as\n\n      // Changing the URL doesn't block executing the current code path.\n      // So let's throw a cancellation error stop the routing logic.\n      throw buildCancellationError()\n    }\n\n    try {\n      const { page: Component, styleSheets } = await this.fetchComponent(\n        '/_error'\n      )\n      const routeInfo: PrivateRouteInfo = {\n        Component,\n        styleSheets,\n        err,\n        error: err,\n      }\n\n      try {\n        routeInfo.props = await this.getInitialProps(Component, {\n          err,\n          pathname,\n          query,\n        } as any)\n      } catch (gipErr) {\n        console.error('Error in error page `getInitialProps`: ', gipErr)\n        routeInfo.props = {}\n      }\n\n      return routeInfo\n    } catch (routeInfoErr) {\n      return this.handleRouteInfoError(routeInfoErr, pathname, query, as, true)\n    }\n  }\n\n  async getRouteInfo(\n    route: string,\n    pathname: string,\n    query: any,\n    as: string,\n    shallow: boolean = false\n  ): Promise<PrivateRouteInfo> {\n    try {\n      const cachedRouteInfo = this.components[route]\n\n      if (shallow && cachedRouteInfo && this.route === route) {\n        return cachedRouteInfo\n      }\n\n      const routeInfo: PrivateRouteInfo = cachedRouteInfo\n        ? cachedRouteInfo\n        : await this.fetchComponent(route).then((res) => ({\n            Component: res.page,\n            styleSheets: res.styleSheets,\n            __N_SSG: res.mod.__N_SSG,\n            __N_SSP: res.mod.__N_SSP,\n          }))\n\n      const { Component, __N_SSG, __N_SSP } = routeInfo\n\n      if (process.env.NODE_ENV !== 'production') {\n        const { isValidElementType } = require('react-is')\n        if (!isValidElementType(Component)) {\n          throw new Error(\n            `The default export is not a React Component in page: \"${pathname}\"`\n          )\n        }\n      }\n\n      let dataHref: string | undefined\n\n      if (__N_SSG || __N_SSP) {\n        dataHref = this.pageLoader.getDataHref(\n          formatWithValidation({ pathname, query }),\n          delBasePath(as),\n          __N_SSG\n        )\n      }\n\n      const props = await this._getData<PrivateRouteInfo>(() =>\n        __N_SSG\n          ? this._getStaticData(dataHref!)\n          : __N_SSP\n          ? this._getServerData(dataHref!)\n          : this.getInitialProps(\n              Component,\n              // we provide AppTree later so this needs to be `any`\n              {\n                pathname,\n                query,\n                asPath: as,\n              } as any\n            )\n      )\n      routeInfo.props = props\n      this.components[route] = routeInfo\n      return routeInfo\n    } catch (err) {\n      return this.handleRouteInfoError(err, pathname, query, as)\n    }\n  }\n\n  set(\n    route: string,\n    pathname: string,\n    query: ParsedUrlQuery,\n    as: string,\n    data: PrivateRouteInfo\n  ): Promise<void> {\n    this.isFallback = false\n\n    this.route = route\n    this.pathname = pathname\n    this.query = query\n    this.asPath = as\n    return this.notify(data)\n  }\n\n  /**\n   * Callback to execute before replacing router state\n   * @param cb callback to be executed\n   */\n  beforePopState(cb: BeforePopStateCallback) {\n    this._bps = cb\n  }\n\n  onlyAHashChange(as: string): boolean {\n    if (!this.asPath) return false\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#')\n    const [newUrlNoHash, newHash] = as.split('#')\n\n    // Makes sure we scroll to the provided hash if the url/hash are the same\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true\n    }\n\n    // If the urls are change, there's more than a hash change\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false\n    }\n\n    // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n    return oldHash !== newHash\n  }\n\n  scrollToHash(as: string): void {\n    const [, hash] = as.split('#')\n    // Scroll to top if the hash is just `#` with no value\n    if (hash === '') {\n      window.scrollTo(0, 0)\n      return\n    }\n\n    // First we check if the element by id is found\n    const idEl = document.getElementById(hash)\n    if (idEl) {\n      idEl.scrollIntoView()\n      return\n    }\n    // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n    const nameEl = document.getElementsByName(hash)[0]\n    if (nameEl) {\n      nameEl.scrollIntoView()\n    }\n  }\n\n  urlIsNew(asPath: string): boolean {\n    return this.asPath !== asPath\n  }\n\n  _resolveHref(parsedHref: UrlObject, pages: string[]) {\n    const { pathname } = parsedHref\n    const cleanPathname = denormalizePagePath(delBasePath(pathname!))\n\n    if (cleanPathname === '/404' || cleanPathname === '/_error') {\n      return parsedHref\n    }\n\n    // handle resolving href for dynamic routes\n    if (!pages.includes(cleanPathname!)) {\n      // eslint-disable-next-line array-callback-return\n      pages.some((page) => {\n        if (\n          isDynamicRoute(page) &&\n          getRouteRegex(page).re.test(cleanPathname!)\n        ) {\n          parsedHref.pathname = addBasePath(page)\n          return true\n        }\n      })\n    }\n    return parsedHref\n  }\n\n  /**\n   * Prefetch page code, you may wait for the data during page rendering.\n   * This feature only works in production!\n   * @param url the href of prefetched page\n   * @param asPath the as path of the prefetched page\n   */\n  async prefetch(\n    url: string,\n    asPath: string = url,\n    options: PrefetchOptions = {}\n  ): Promise<void> {\n    let parsed = parseRelativeUrl(url)\n\n    let { pathname } = parsed\n\n    const pages = await this.pageLoader.getPageList()\n\n    parsed = this._resolveHref(parsed, pages) as typeof parsed\n\n    if (parsed.pathname !== pathname) {\n      pathname = parsed.pathname\n      url = formatWithValidation(parsed)\n    }\n\n    // Prefetch is not supported in development mode because it would trigger on-demand-entries\n    if (process.env.NODE_ENV !== 'production') {\n      return\n    }\n\n    const route = removePathTrailingSlash(pathname)\n    await Promise.all([\n      this.pageLoader.prefetchData(url, asPath),\n      this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route),\n    ])\n  }\n\n  async fetchComponent(route: string): Promise<GoodPageCache> {\n    let cancelled = false\n    const cancel = (this.clc = () => {\n      cancelled = true\n    })\n\n    const componentResult = await this.pageLoader.loadPage(route)\n\n    if (cancelled) {\n      const error: any = new Error(\n        `Abort fetching component for route: \"${route}\"`\n      )\n      error.cancelled = true\n      throw error\n    }\n\n    if (cancel === this.clc) {\n      this.clc = null\n    }\n\n    return componentResult\n  }\n\n  _getData<T>(fn: () => Promise<T>): Promise<T> {\n    let cancelled = false\n    const cancel = () => {\n      cancelled = true\n    }\n    this.clc = cancel\n    return fn().then((data) => {\n      if (cancel === this.clc) {\n        this.clc = null\n      }\n\n      if (cancelled) {\n        const err: any = new Error('Loading initial props cancelled')\n        err.cancelled = true\n        throw err\n      }\n\n      return data\n    })\n  }\n\n  _getStaticData(dataHref: string): Promise<object> {\n    const { href: cacheKey } = new URL(dataHref, window.location.href)\n    if (process.env.NODE_ENV === 'production' && this.sdc[cacheKey]) {\n      return Promise.resolve(this.sdc[cacheKey])\n    }\n    return fetchNextData(dataHref, this.isSsr).then((data) => {\n      this.sdc[cacheKey] = data\n      return data\n    })\n  }\n\n  _getServerData(dataHref: string): Promise<object> {\n    return fetchNextData(dataHref, this.isSsr)\n  }\n\n  getInitialProps(\n    Component: ComponentType,\n    ctx: NextPageContext\n  ): Promise<any> {\n    const { Component: App } = this.components['/_app']\n    const AppTree = this._wrapApp(App as AppComponent)\n    ctx.AppTree = AppTree\n    return loadGetInitialProps<AppContextType<Router>>(App, {\n      AppTree,\n      Component,\n      router: this,\n      ctx,\n    })\n  }\n\n  abortComponentLoad(as: string): void {\n    if (this.clc) {\n      Router.events.emit('routeChangeError', buildCancellationError(), as)\n      this.clc()\n      this.clc = null\n    }\n  }\n\n  notify(data: PrivateRouteInfo): Promise<void> {\n    return this.sub(data, this.components['/_app'].Component as AppComponent)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}