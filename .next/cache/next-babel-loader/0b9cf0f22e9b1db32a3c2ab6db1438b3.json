{"ast":null,"code":"var __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport React, { Fragment } from 'react';\nimport { Box } from 'theme-ui';\nimport RcDrawer from 'rc-drawer';\nconst Drawer = _ref => {\n  let {\n      className,\n      children,\n      closeButton,\n      closeButtonStyle,\n      drawerHandler,\n      toggleHandler,\n      open,\n      width,\n      placement,\n      drawerStyle,\n      closeBtnStyle\n    } = _ref,\n    props = _objectWithoutProperties(_ref, [\"className\", \"children\", \"closeButton\", \"closeButtonStyle\", \"drawerHandler\", \"toggleHandler\", \"open\", \"width\", \"placement\", \"drawerStyle\", \"closeBtnStyle\"]);\n  return __jsx(Fragment, null, __jsx(RcDrawer, _extends({\n    open: open,\n    onClose: toggleHandler,\n    className: `drawer ${className ? className : ''}`.trim(),\n    width: width,\n    placement: placement,\n    handler: false,\n    level: null,\n    duration: \"0.4s\"\n  }, props), closeButton && __jsx(Box, {\n    as: \"div\",\n    onClick: toggleHandler,\n    sx: closeBtnStyle\n  }, closeButton), __jsx(Box, {\n    sx: drawerStyle\n  }, children)), __jsx(Box, {\n    className: \"drawer__handler\",\n    style: {\n      display: 'inline-block'\n    },\n    onClick: toggleHandler\n  }, drawerHandler));\n};\nDrawer.defaultProps = {\n  width: '320px',\n  placement: 'left'\n};\nexport default Drawer;","map":null,"metadata":{},"sourceType":"module"}